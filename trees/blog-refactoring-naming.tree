\title{Refactoring and Code Style: Naming}
\date{2021-11-08}
\author{rileyshahar}

\import{macros01}

\p{\code{i}, \code{j}, and \code{k} are not particularly easy to keep track of;
it's easy to mistake \code{i} for \code{j} in particular.}

\em{Exercise: think of better names.}

\codeblock{\startverb%
prev=0
curr=1

count=0
while count<8:
    print(curr)
    prev,curr=curr,prev+curr
    count+=1
\stopverb}

\p{This is an example of a \em{readability} refactor; its purpose is to make the
code easier to read at a glance.}

\p{\em{Question: why do we care about readability?}}

\ul{
	\li{Code review: anyone reading with your code, be it your friends or
	professors or future-evil-corporate-boss (or your friendly TA graders! :P)
	will find it much easier if they can... you know... read the code easily. That
	will let them spend more mental energy helping you and less mental energy
	asking questions like "what did that variable mean again?"}

  \li{Other maintainers: similarly, you'll often not be the only one
	\em{writing} the code. Following naming conventions is super important in
	collaborative projects, because even if the name makes sense to you ("I always
	use \code{l} for a list, why can't I do that?"), it won't make sense to your
	collaboratos.}

  \li{Future you: one important lesson from development is that, even on solo
	projects, you should treat \em{future you} like another person. In a week, you
	won't remember a single thing about the specific choices you make writing this
	code; nevermind in a month or five years. Make sure your code is readable for
	your own sake.}
}

That said, three things to keep in mind with variable names:

\ul{
  \li{\em{Convention}. The names \code{prev} and \code{curr} are conventionally
	used for this kind of iterative procedure when you need to keep track of the
	two previous values. Many programmers will automatically know the meanings of
	variables like \code{prev} and \code{curr} just from their names because
	they've read other code that used those same conventions. Other examples of
	this: \code{n} for some kind of bound, \code{ret} or \code{out} for the value
	that's going to be returned at the end, \code{self} for the reciever of a
	method.}

  \li{\em{Length}. Avoid one-letter names except in rare cases (a very short
	loop index, or \code{n} for a bound). Also avoid unnecessarily long names like
	\code{the_fibonacci_number_that_i_calculated_previously}.}

  \li{\em{Word Delineation}. \code{thepreviousnumber} is harder to read than
	\code{thePreviousNumber} or \code{the\em{previous}number}. The first style is
	called \code{camelCase} and the second is \code{snake_case}.}
}
